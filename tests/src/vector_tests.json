
{
	"Operator Overloads" : [
		{
			"tag" : "equality_identity",
			"test" : "vec_a == vec_a"
		},
		{
			"tag" : "inequality_non_identity",
			"test" : "vec_a != vec_b"
		},
		{
			"tag" : "negation_double_negation",
			"test" : "test_equal(-(-vec_a), vec_a)"
		},
		{
			"tag" : "addition_commutativity",
			"test" : "test_equal(vec_a+vec_b, vec_b+vec_a)"
		},
		{
			"tag" : "addition_associativity",
			"test" : "test_equal(vec_a+(vec_b+vec_c), (vec_a+vec_b)+vec_c)"
		},
		{
			"tag" : "addition_identity",
			"test" : "test_equal(vec_a+vec_t(0), vec_a)"
		},
		{
			"tag" : "subtraction_anticommutativity",
			"test" : "test_equal(vec_a-vec_b, -(vec_b-vec_a))"
		},
		{
			"tag" : "subtraction_nonassociativity",
			"test" : "!test_equal(vec_a-(vec_b-vec_t(1)), (vec_a-vec_b)-vec_t(1))"
		},
		{
			"tag" : "subtraction_identity",
			"test" : "test_equal(vec_a-vec_t(0), vec_a)"
		},
		{
			"tag" : "subtraction_negation",
			"test" : "test_equal(vec_t(0)-vec_a, -vec_a)"
		},
		{
			"tag" : "multiplication_commutativity",
			"test" : "test_equal(vec_a*vec_b, vec_b*vec_a)"
		},
		{
			"tag" : "multiplication_associativity",
			"test" : "test_equal(vec_a*(vec_b*vec_c), (vec_a*vec_b)*vec_c)"
		},
		{
			"tag" : "multiplication_distributive",
			"test" : "test_equal(vec_a*(vec_b+vec_c), vec_a*vec_b+vec_a*vec_c)"
		},
		{
			"tag" : "multiplication_identity",
			"test" : "test_equal(vec_a*vec_t(1), vec_a)"
		},
		{
			"tag" : "multiplication_zero_property",
			"test" : "test_equal(vec_a*vec_t(0), vec_t(0))"
		},
		{
			"tag" : "multiplication_negation",
			"test" : "test_equal(-vec_t(1)*-vec_t(1)*vec_a, vec_a)"
		},
		{
			"tag" : "multiplication_inverse",
			"test" : "test_equal(vec_a*(vec_t(1)/vec_a), vec_t(1))"
		},

		{
			"tag" : "division_right_distributive",
			"test" : "test_equal((vec_a+vec_b)/vec_c, vec_a/vec_c + vec_b/vec_c)"
		},
		{
			"tag" : "division_left_antidistributive",
			"test" : "!test_equal(vec_a/(vec_b+vec_c), vec_a/vec_b + vec_a/vec_c)"
		}

	],

	"Angle and Trigonometry Functions" : [
		{
			"tag" : "degrees_radians",
			"test" : "test_equal(degrees(radians(vec_a)), vec_a)"
		},
		{
			"tag" : "radians_degrees",
			"test" : "test_equal(radians(degrees(vec_a)), vec_a)"
		},
		{
			"tag" : "trigonometry_sin_double_inverse",
			"test" : "test_equal(asin(sin(pi * vec_a/2)), pi * vec_a/2)"
		},
		{
			"tag" : "trigonometry_cos_double_inverse",
			"test" : "test_equal(acos(cos(pi * vec_pos)), pi * vec_pos)"
		},
		{
			"tag" : "trigonometry_tan_double_inverse",
			"test" : "test_equal(atan(tan(vec_a)), vec_a)"
		},
		{
			"tag" : "trigonometry_hyperbolic_sinh_double_inverse",
			"test" : "test_equal(asinh(sinh(pi * vec_a/2)), pi * vec_a/2)"
		},
		{
			"tag" : "trigonometry_hyperbolic_cosh_double_inverse",
			"test" : "test_equal(acosh(cosh(pi * vec_pos)), pi * vec_pos)"
		},
		{
			"tag" : "trigonometry_hyperbolic_tanh_double_inverse",
			"test" : "test_equal(atanh(tanh(vec_a)), vec_a)"
		},
		{
			"tag" : "trigonometry_quotient",
			"test" : "test_equal(tan(vec_a), sin(vec_a)/cos(vec_a))"
		},
		{
			"tag" : "trigonometry_inverse_quotient",
			"test" : "test_equal(vec_t(1)/tan(vec_a), (vec_t(1)/sin(vec_a))/(vec_t(1)/cos(vec_a)))"
		},
		{
			"tag" : "trigonometry_sin_cos_pythagorean",
			"test" : "test_equal(sin(vec_a)*sin(vec_a) + cos(vec_a)*cos(vec_a), vec_t(1))"
		},
		{
			"tag" : "trigonometry_tan_sec_pythagorean",
			"test" : "test_equal(vec_t(1)+tan(vec_a)*tan(vec_a), (vec_t(1)/cos(vec_a))*(vec_t(1)/cos(vec_a)))"
		},
		{
			"tag" : "trigonometry_tan_sec_pythagorean_2",
			"test" : "test_equal(vec_t(1)+(vec_t(1)/tan(vec_a))*(vec_t(1)/tan(vec_a)), (vec_t(1)/sin(vec_a))*(vec_t(1)/sin(vec_a)))"
		}
	],

	"Exponential Functions" : [
		{
			"tag" : "pow_double_equality",
			"test" : "test_equal(vec_a*vec_a, pow(vec_a, vec_t(2)))"
		},
		{
			"tag" : "pow_triple_equality",
			"test" : "test_equal(vec_a*vec_a*vec_a, pow(vec_a, vec_t(3)))"
		},
		{
			"tag" : "exp_log_double_inverse",
			"test" : "test_equal(log(exp(vec_a)), vec_a)"
		},
		{
			"tag" : "exp_log_double_inverse_reverse",
			"test" : "test_equal(exp(log(vec_pos)), vec_pos)"
		},
		{
			"tag" : "exp2_log2_double_inverse",
			"test" : "test_equal(log2(exp2(vec_a)), vec_a)"
		},
		{
			"tag" : "exp2_log2_double_inverse_reverse",
			"test" : "test_equal(exp2(log2(vec_pos)), vec_pos)"
		},
		{
			"tag" : "pow_sqrt_double_inverse",
			"test" : "test_equal(sqrt(pow(vec_pos, vec_t(2))), vec_pos)"
		},
		{
			"tag" : "pow_sqrt_double_inverse_reverse",
			"test" : "test_equal(pow(sqrt(vec_pos), vec_t(2)), vec_pos)"
		},
		{
			"tag" : "sqrt_inversesqrt_abs_equality",
			"test" : "test_equal(1/sqrt(vec_pos), inversesqrt(vec_pos))"
		}
	],

	"Common Functions" : [
		{
			"tag" : "abs_negation",
			"test" : "test_equal(abs(vec_a), abs(-vec_a))"
		},
		{
			"tag" : "sign_zero",
			"test" : "test_equal(vec_t(sign(vec_t(0))), vec_t(0))"
		},
		{
			"tag" : "sign_identity_absolute",
			"test" : "test_equal(sign(vec_a)*abs(vec_a), vec_a)"
		},
		{
			"tag" : "floor_all_less_than_equal",
			"test" : "all(less_than_equal(floor(vec_a), vec_a))"
		},
		{
			"tag" : "floor_fract_zero",
			"test" : "test_equal(fract(floor(vec_a)), vec_t(0))"
		},
		{
			"tag" : "ceil_all_greater_than_equal",
			"test" : "all(greater_than_equal(ceil(vec_a), vec_a))"
		},
		{
			"tag" : "ceil_fract_zero",
			"test" : "test_equal(fract(ceil(vec_a)), vec_t(0))"
		},
		{
			"tag" : "mod_scalar_fract",
			"test" : "test_equal(mod(vec_pos+vec_t(1), val_t(1)), fract(vec_pos))"
		},
		{
			"tag" : "mod_vector_fract",
			"test" : "test_equal(mod(vec_pos+vec_t(1), vec_t(1)),  fract(vec_pos))"
		},
		{
			"tag" : "min_scalar_greater_than_equal",
			"test" : "all(less_than_equal(min(vec_a,val_a), vec_a)) && all(less_than_equal(min(vec_a,val_a), vec_t(val_a)))"
		},
		{
			"tag" : "min_vector_greater_than_equal",
			"test" : "all(less_than_equal(min(vec_a,vec_b), vec_a)) && all(less_than_equal(min(vec_a,vec_b), vec_b))"
		},
		{
			"tag" : "max_scalar_greater_than_equal",
			"test" : "all(greater_than_equal(max(vec_a,val_a), vec_a)) && all(greater_than_equal(max(vec_a,val_a), vec_t(val_a)))"
		},
		{
			"tag" : "max_vector_greater_than_equal",
			"test" : "all(greater_than_equal(max(vec_a,vec_b), vec_a)) && all(greater_than_equal(max(vec_a,vec_b), vec_b))"
		},
		{
			"tag" : "min_max_scalar_summation_equality",
			"test" : "test_equal(min(vec_a,val_a)+max(vec_a,val_a),  vec_a+val_a)"
		},
		{
			"tag" : "min_max_vector_summation_equality",
			"test" : "test_equal(min(vec_a,vec_b)+max(vec_a,vec_b),  vec_a+vec_b)"
		},
		{
			"tag" : "mix_scalar_identity",
			"test" : "test_equal(mix(vec_a, vec_a, val_a), vec_a)"
		},
		{
			"tag" : "mix_scalar_summation_equality",
			"test" : "test_equal(mix(vec_a, vec_b, val_a) + mix(vec_b, vec_a, val_a), vec_a+vec_b)"
		},
		{
			"tag" : "mix_vector_identity",
			"test" : "test_equal(mix(vec_a, vec_a, vec_pos), vec_a)"
		},
		{
			"tag" : "mix_vector_summation_equality",
			"test" : "test_equal(mix(vec_a, vec_b, vec_pos) + mix(vec_b, vec_a, vec_pos), vec_a+vec_b)"
		}
	],


	"Geometric Functions" : [


		{
			"tag" : "cross_anticommutativity",
			"test" : "test_equal(cross(vec_a, vec_b), -cross(vec_b, vec_a))",
			"N" : [3]
		}
	],


	"Relational Functions" : [
		{
			"tag" : "all_less_than_greater_than_equal_not_equal_exclusivity",
			"test" : "all(not_equal(less_than(vec_a, vec_b), greater_than_equal(vec_a, vec_b)))"
		},
		{
			"tag" : "all_less_than_equal_greater_than_not_equal_exclusivity",
			"test" : "all(not_equal(less_than_equal(vec_a, vec_b), greater_than(vec_a, vec_b)))"
		}
	]
}